//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WaveWebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PosPFEntities : DbContext
    {
        public PosPFEntities()
            : base("name=PosPFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CAJA> CAJA { get; set; }
        public virtual DbSet<CAJA_POR_SUCURSAL> CAJA_POR_SUCURSAL { get; set; }
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<EMPLEADO_POR_ROL> EMPLEADO_POR_ROL { get; set; }
        public virtual DbSet<EMPLEADO_POR_SUCURSAL> EMPLEADO_POR_SUCURSAL { get; set; }
        public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }
        public virtual DbSet<PRODUCTO_POR_PROVEEDOR> PRODUCTO_POR_PROVEEDOR { get; set; }
        public virtual DbSet<PRODUCTO_POR_SUCURSAL> PRODUCTO_POR_SUCURSAL { get; set; }
        public virtual DbSet<PRODUCTO_POR_VENTA> PRODUCTO_POR_VENTA { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<ROL> ROL { get; set; }
        public virtual DbSet<SUCURSAL> SUCURSAL { get; set; }
        public virtual DbSet<VENTA_POR_CAJA> VENTA_POR_CAJA { get; set; }
        public virtual DbSet<VENTA_POR_CLIENTE> VENTA_POR_CLIENTE { get; set; }
        public virtual DbSet<View_CajaPorSucursal> View_CajaPorSucursal { get; set; }
        public virtual DbSet<View_ProductoPorProveedor> View_ProductoPorProveedor { get; set; }
        public virtual DbSet<View_ProductoPorSucursal> View_ProductoPorSucursal { get; set; }
        public virtual DbSet<View_VentaPorCaja> View_VentaPorCaja { get; set; }
        public virtual DbSet<View_VentaPorCliente> View_VentaPorCliente { get; set; }
        public virtual DbSet<VENTA> VENTA { get; set; }
        public virtual DbSet<View_Ventas> View_Ventas { get; set; }
        public virtual DbSet<View_ProductoPorVenta> View_ProductoPorVenta { get; set; }
        public virtual DbSet<View_spInsertVenta> View_spInsertVenta { get; set; }
        public virtual DbSet<View_spProductosPorVenta> View_spProductosPorVenta { get; set; }
        public virtual DbSet<View_EmpleadoPorRol> View_EmpleadoPorRol { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADO { get; set; }
        public virtual DbSet<View_EmpleadoPorSucursal> View_EmpleadoPorSucursal { get; set; }
    
        public virtual int sp_insert_Caja(Nullable<decimal> dinero, Nullable<int> idSucursal)
        {
            var dineroParameter = dinero.HasValue ?
                new ObjectParameter("Dinero", dinero) :
                new ObjectParameter("Dinero", typeof(decimal));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Caja", dineroParameter, idSucursalParameter);
        }
    
        public virtual int sp_insert_Empleado(string contrasena, string cedula, string nombre, string apellidos, Nullable<byte> idRol)
        {
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Empleado", contrasenaParameter, cedulaParameter, nombreParameter, apellidosParameter, idRolParameter);
        }
    
        public virtual int sp_insert_Producto(string nombre, string eAN, Nullable<decimal> precio, Nullable<int> idProveedor)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var eANParameter = eAN != null ?
                new ObjectParameter("EAN", eAN) :
                new ObjectParameter("EAN", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Producto", nombreParameter, eANParameter, precioParameter, idProveedorParameter);
        }
    
        public virtual int sp_insert_ProductosPorVenta(Nullable<int> idProducto, Nullable<int> idVenta, Nullable<short> cantidad, Nullable<int> idCaja)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(short));
    
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("IdCaja", idCaja) :
                new ObjectParameter("IdCaja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_ProductosPorVenta", idProductoParameter, idVentaParameter, cantidadParameter, idCajaParameter);
        }
    
        public virtual int sp_insert_Proveedor(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Proveedor", nombreParameter);
        }
    
        public virtual int sp_insert_Rol(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Rol", nombreParameter);
        }
    
        public virtual int sp_insert_Sucursal(string nombre, string direccion, Nullable<int> telefono)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Sucursal", nombreParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int sp_insert_Venta(Nullable<int> idCaja, Nullable<int> idCliente, Nullable<short> duracion)
        {
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("IdCaja", idCaja) :
                new ObjectParameter("IdCaja", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("Duracion", duracion) :
                new ObjectParameter("Duracion", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_Venta", idCajaParameter, idClienteParameter, duracionParameter);
        }
    
        public virtual int sp_reStock(Nullable<int> idProduct, Nullable<short> quantity, Nullable<int> idSucursal)
        {
            var idProductParameter = idProduct.HasValue ?
                new ObjectParameter("IdProduct", idProduct) :
                new ObjectParameter("IdProduct", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_reStock", idProductParameter, quantityParameter, idSucursalParameter);
        }
    
        public virtual int sp_Stock(Nullable<int> idProducto, Nullable<short> stock, Nullable<short> stockMinimo, Nullable<int> idSucursal)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(short));
    
            var stockMinimoParameter = stockMinimo.HasValue ?
                new ObjectParameter("StockMinimo", stockMinimo) :
                new ObjectParameter("StockMinimo", typeof(short));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Stock", idProductoParameter, stockParameter, stockMinimoParameter, idSucursalParameter);
        }
    }
}
